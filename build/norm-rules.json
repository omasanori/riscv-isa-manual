{
  "normative_rules": [
    {
      "name": "mul_op",
      "def_filename": "normative_rule_defs/m-st-ext.yaml",
      "tags": [
        {
          "name": "norm:mul_op",
          "text": "MUL performs an XLEN-bit×XLEN-bit multiplication of\nrs1 by rs2 and places the lower XLEN bits in the destination\nregister.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "mulh_op",
      "def_filename": "normative_rule_defs/m-st-ext.yaml",
      "tags": [
        {
          "name": "norm:mulh_mulhu_mulhsu_op",
          "text": "MULH, MULHU, and MULHSU perform the same multiplication but\nreturn the upper XLEN bits of the full 2×XLEN-bit\nproduct, for signed×signed,\nunsigned×unsigned, and rs1×unsigned rs2 multiplication.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "mulhu_op",
      "def_filename": "normative_rule_defs/m-st-ext.yaml",
      "tags": [
        {
          "name": "norm:mulh_mulhu_mulhsu_op",
          "text": "MULH, MULHU, and MULHSU perform the same multiplication but\nreturn the upper XLEN bits of the full 2×XLEN-bit\nproduct, for signed×signed,\nunsigned×unsigned, and rs1×unsigned rs2 multiplication.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "mulhsu_op",
      "def_filename": "normative_rule_defs/m-st-ext.yaml",
      "tags": [
        {
          "name": "norm:mulh_mulhu_mulhsu_op",
          "text": "MULH, MULHU, and MULHSU perform the same multiplication but\nreturn the upper XLEN bits of the full 2×XLEN-bit\nproduct, for signed×signed,\nunsigned×unsigned, and rs1×unsigned rs2 multiplication.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "div_op",
      "def_filename": "normative_rule_defs/m-st-ext.yaml",
      "tags": [
        {
          "name": "norm:div_divu_op",
          "text": "DIV and DIVU perform an XLEN bits by XLEN bits signed and unsigned\ninteger division of rs1 by rs2, rounding towards zero.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "divu_op",
      "def_filename": "normative_rule_defs/m-st-ext.yaml",
      "tags": [
        {
          "name": "norm:div_divu_op",
          "text": "DIV and DIVU perform an XLEN bits by XLEN bits signed and unsigned\ninteger division of rs1 by rs2, rounding towards zero.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "divw_op",
      "def_filename": "normative_rule_defs/m-st-ext.yaml",
      "tags": [
        {
          "name": "norm:divw_divuw_op",
          "text": "DIVW and DIVUW are RV64 instructions that divide the lower 32 bits of\nrs1 by the lower 32 bits of rs2, treating them as signed and\nunsigned integers, placing the 32-bit quotient in rd,\nsign-extended to 64 bits.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "divuw_op",
      "def_filename": "normative_rule_defs/m-st-ext.yaml",
      "tags": [
        {
          "name": "norm:divw_divuw_op",
          "text": "DIVW and DIVUW are RV64 instructions that divide the lower 32 bits of\nrs1 by the lower 32 bits of rs2, treating them as signed and\nunsigned integers, placing the 32-bit quotient in rd,\nsign-extended to 64 bits.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "rem_op",
      "def_filename": "normative_rule_defs/m-st-ext.yaml",
      "tags": [
        {
          "name": "norm:rem_remu_op",
          "text": "REM and REMU\nprovide the remainder of the corresponding division operation.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "remu_op",
      "def_filename": "normative_rule_defs/m-st-ext.yaml",
      "tags": [
        {
          "name": "norm:rem_remu_op",
          "text": "REM and REMU\nprovide the remainder of the corresponding division operation.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "remw_op",
      "def_filename": "normative_rule_defs/m-st-ext.yaml",
      "tags": [
        {
          "name": "norm:remw_remuw_op",
          "text": "REMW and REMUW are RV64 instructions that\nprovide the corresponding signed and unsigned remainder\noperations.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "remuw_op",
      "def_filename": "normative_rule_defs/m-st-ext.yaml",
      "tags": [
        {
          "name": "norm:remw_remuw_op",
          "text": "REMW and REMUW are RV64 instructions that\nprovide the corresponding signed and unsigned remainder\noperations.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "div_by_zero",
      "def_filename": "normative_rule_defs/m-st-ext.yaml",
      "tags": [
        {
          "name": "norm:div_by_zero",
          "text": "The quotient of division by zero has all bits\nset",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "rem_by_zero",
      "def_filename": "normative_rule_defs/m-st-ext.yaml",
      "tags": [
        {
          "name": "norm:rem_by_zero",
          "text": "the remainder of division by zero equals the dividend.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "signed_div_overflow",
      "def_filename": "normative_rule_defs/m-st-ext.yaml",
      "tags": [
        {
          "name": "norm:signed_div_overflow",
          "text": "Signed division overflow occurs only when the most-negative integer is divided\nby image:../../build/images-out/stem-52c1acbf19a35be815dca1fd989d89e4.svg[width=15,height=8]. The quotient of a signed division with overflow is\nequal to the dividend, and the remainder is zero.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "rem_result_sign",
      "def_filename": "normative_rule_defs/m-st-ext.yaml",
      "tags": [
        {
          "name": "norm:rem_result_sign",
          "text": "For REM,\nthe sign of a nonzero result equals the sign of the dividend.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "remw_result_sign",
      "def_filename": "normative_rule_defs/m-st-ext.yaml",
      "tags": [
        {
          "name": "norm:remw_remuw_result_sign",
          "text": "BothREMW and REMUW always sign-extend the 32-bit result\nto 64 bits, including on a divide by zero.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "remuw_result_sign",
      "def_filename": "normative_rule_defs/m-st-ext.yaml",
      "tags": [
        {
          "name": "norm:remw_remuw_result_sign",
          "text": "BothREMW and REMUW always sign-extend the 32-bit result\nto 64 bits, including on a divide by zero.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "mulw_op",
      "def_filename": "normative_rule_defs/m-st-ext.yaml",
      "tags": [
        {
          "name": "norm:mulw_op",
          "text": "MULW is an RV64 instruction that multiplies the lower 32 bits of the\nsource registers, placing the sign extension of the lower 32 bits of the\nresult into the destination register.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "mul_misa_M_dis",
      "def_filename": "normative_rule_defs/m-st-ext.yaml",
      "description": "An illegal instruction exception is raised when the instruction is executed\nand `misa.M` is 0.\n",
      "tags": [
        {
          "name": "norm:misa_extensions_disabling",
          "text": "When a standard extension is disabled by clearing its bit in misa, the\ninstructions and CSRs defined or modified by the extension revert to\ntheir defined or reserved behaviors as if the extension is not\nimplemented.",
          "tag_filename": "/build/riscv-privileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "M_highest_priv_mode",
      "def_filename": "normative_rule_defs/machine.yaml",
      "tags": [
        {
          "name": "norm:M_highest_priv_mode",
          "text": "machine-mode (M-mode), which is the highest privilege mode in a RISC-V\nhart.",
          "tag_filename": "/build/riscv-privileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "M_mode_at_reset",
      "def_filename": "normative_rule_defs/machine.yaml",
      "tags": [
        {
          "name": "norm:M_mode_at_reset",
          "text": "M-mode is used for low-level access to a hardware platform and\nis the first mode entered at reset.",
          "tag_filename": "/build/riscv-privileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "M_access_all_lower_priv_CSRs",
      "def_filename": "normative_rule_defs/machine.yaml",
      "tags": [
        {
          "name": "norm:M_access_all_lower_priv_CSRs",
          "text": "M-mode code can access all CSRs at lower privilege levels.",
          "tag_filename": "/build/riscv-privileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "misa_acc",
      "def_filename": "normative_rule_defs/machine.yaml",
      "tags": [
        {
          "name": "norm:misa_acc",
          "text": "The misa CSR is a WARL read-write register",
          "tag_filename": "/build/riscv-privileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "misa_always_rd",
      "def_filename": "normative_rule_defs/machine.yaml",
      "tags": [
        {
          "name": "norm:misa_always_rd",
          "text": "This register must be readable in any implementation",
          "tag_filename": "/build/riscv-privileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "MISA_CSR_IMPLEMENTED",
      "def_filename": "normative_rule_defs/machine.yaml",
      "tags": [
        {
          "name": "norm:MISA_CSR_IMPLEMENTED",
          "text": "a value of zero can be returned to indicate the misa register has not been implemented",
          "tag_filename": "/build/riscv-privileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "misa_mxl_op",
      "def_filename": "normative_rule_defs/machine.yaml",
      "tags": [
        {
          "name": "norm:misa_mxl_op_isa",
          "text": "The MXL (Machine XLEN) field encodes the native base integer ISA width as\nshown in &lt;&lt;misabase&gt;&gt;.",
          "tag_filename": "/build/riscv-privileged-norm-tags.json"
        },
        {
          "name": "norm:misa_mxl_op_nz",
          "text": "If misa is nonzero, the\nMXL field indicates the effective XLEN in M-mode, a constant termed MXLEN.",
          "tag_filename": "/build/riscv-privileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "misa_mxl_acc",
      "def_filename": "normative_rule_defs/machine.yaml",
      "tags": [
        {
          "name": "norm:misa_mxl_acc",
          "text": "The MXL field is read-only.",
          "tag_filename": "/build/riscv-privileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "misa_sz",
      "def_filename": "normative_rule_defs/machine.yaml",
      "tags": [
        {
          "name": "norm:misa_sz",
          "text": "The misa CSR is MXLEN bits wide.",
          "tag_filename": "/build/riscv-privileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "misa_extensions_enc",
      "def_filename": "normative_rule_defs/machine.yaml",
      "tags": [
        {
          "name": "norm:misa_extensions_enc",
          "text": "The Extensions field encodes the presence of the standard extensions,\nwith a single bit per letter of the alphabet (bit 0 encodes presence of\nextension \"A\" , bit 1 encodes presence of extension \"B\", through to\nbit 25 which encodes \"Z\").",
          "tag_filename": "/build/riscv-privileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "misa_extensions_op",
      "def_filename": "normative_rule_defs/machine.yaml",
      "tags": [
        {
          "name": "norm:misa_extensions_op",
          "text": "The Extensions field is a WARL field that can contain writable bits where the\nimplementation allows the supported ISA to be modified.",
          "tag_filename": "/build/riscv-privileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "misa_extensions_rst",
      "def_filename": "normative_rule_defs/machine.yaml",
      "tags": [
        {
          "name": "norm:misa_extensions_rst",
          "text": "At reset,\nthe Extensions field shall contain the maximal set of supported extensions,\nand \"I\" shall be selected over \"E\" if both are available.",
          "tag_filename": "/build/riscv-privileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "misa_extensions_disabling",
      "def_filename": "normative_rule_defs/machine.yaml",
      "description": "what happens when you turn off bits",
      "tags": [
        {
          "name": "norm:misa_extensions_disabling",
          "text": "When a standard extension is disabled by clearing its bit in misa, the\ninstructions and CSRs defined or modified by the extension revert to\ntheir defined or reserved behaviors as if the extension is not\nimplemented.",
          "tag_filename": "/build/riscv-privileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "misa_extensions_impl_def",
      "def_filename": "normative_rule_defs/machine.yaml",
      "tags": [
        {
          "name": "norm:misa_extensions_impl_def",
          "text": "For a given RISC-V execution environment, an instruction, extension, or\nother feature of the RISC-V ISA is ordinarily judged to be implemented\nor not by the observable execution behavior in that environment. For\nexample, the F extension is said to be implemented for an execution\nenvironment if and only if the instructions that the RISC-V Unprivileged\nISA defines for F execute as specified.",
          "tag_filename": "/build/riscv-privileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "misa_extensions_disabling_def",
      "def_filename": "normative_rule_defs/machine.yaml",
      "tags": [
        {
          "name": "norm:misa_extensions_disabling_def",
          "text": "With this definition of implemented, disabling an extension by\nclearing its bit in misa results in the extension being considered\nnot implemented in M-mode. For example, setting misa.F=0 results in\nthe F extension being not implemented for M-mode, because the F\nextension&#8217;s instructions will not act as the Unprivileged ISA requires\nbut may instead raise an illegal-instruction exception.",
          "tag_filename": "/build/riscv-privileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "misa_extensions_rsv_ret_0",
      "def_filename": "normative_rule_defs/machine.yaml",
      "tags": [
        {
          "name": "norm:misa_extensions_rsv_ret_0",
          "text": "All bits that are reserved for future use must return zero when read.",
          "tag_filename": "/build/riscv-privileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "misa_i_op",
      "def_filename": "normative_rule_defs/machine.yaml",
      "tags": [
        {
          "name": "norm:misa_i_op",
          "text": "The \"I\" bit will be set for the RV32I and RV64I base ISAs",
          "tag_filename": "/build/riscv-privileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "misa_e_op",
      "def_filename": "normative_rule_defs/machine.yaml",
      "tags": [
        {
          "name": "norm:misa_e_op",
          "text": "the \"E\" bit will be set for RV32E and RV64E.",
          "tag_filename": "/build/riscv-privileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "misa_x_op",
      "def_filename": "normative_rule_defs/machine.yaml",
      "tags": [
        {
          "name": "norm:misa_x_op",
          "text": "The \"X\" bit will be set if there are any non-standard extensions.",
          "tag_filename": "/build/riscv-privileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "misa_b_op",
      "def_filename": "normative_rule_defs/machine.yaml",
      "tags": [
        {
          "name": "norm:misa_b_op",
          "text": "When the \"B\" bit is 1, the implementation supports the instructions provided by the\nZba, Zbb, and Zbs extensions.",
          "tag_filename": "/build/riscv-privileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "misa_m_op",
      "def_filename": "normative_rule_defs/machine.yaml",
      "tags": [
        {
          "name": "norm:misa_m_op",
          "text": "When the \"M\" bit is 1, the implementation supports all multiply and\ndivision instructions defined by the M extension.",
          "tag_filename": "/build/riscv-privileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "misa_s_op",
      "def_filename": "normative_rule_defs/machine.yaml",
      "tags": [
        {
          "name": "norm:misa_s_op",
          "text": "When the \"S\" bit is 1, the implementation supports supervisor mode.",
          "tag_filename": "/build/riscv-privileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "misa_u_op",
      "def_filename": "normative_rule_defs/machine.yaml",
      "tags": [
        {
          "name": "norm:misa_u_op",
          "text": "When the \"U\" bit is 1, the implementation supports user mode.",
          "tag_filename": "/build/riscv-privileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "misa_e_not_i",
      "def_filename": "normative_rule_defs/machine.yaml",
      "tags": [
        {
          "name": "norm:misa_e_not_i",
          "text": "Unless misa is all read-only zero, the\n\"E\" bit always reads as the complement of the \"I\" bit.",
          "tag_filename": "/build/riscv-privileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "Zmmul_misa_m",
      "def_filename": "normative_rule_defs/machine.yaml",
      "tags": [
        {
          "name": "norm:Zmmul_misa_m",
          "text": "if the Zmmul extension is supported then\nthe multiply instructions it specifies are supported irrespective\nof the value of the \"M\" bit.",
          "tag_filename": "/build/riscv-privileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "misa_e_acc",
      "def_filename": "normative_rule_defs/machine.yaml",
      "tags": [
        {
          "name": "norm:misa_e_acc",
          "text": "The \"E\" bit is read-only.",
          "tag_filename": "/build/riscv-privileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "misa_extensions_dependencies",
      "def_filename": "normative_rule_defs/machine.yaml",
      "tags": [
        {
          "name": "norm:misa_extensions_dependencies",
          "text": "If an ISA feature x depends on an ISA feature y, then attempting to\nenable feature x but disable feature y results in both features\nbeing disabled.",
          "tag_filename": "/build/riscv-privileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "misa_inc_ialign",
      "def_filename": "normative_rule_defs/machine.yaml",
      "tags": [
        {
          "name": "norm:misa_inc_ialign",
          "text": "Writing misa may increase IALIGN, e.g., by disabling the \"C\"\nextension. If an instruction that would write misa increases IALIGN,\nand the subsequent instruction's address is not IALIGN-bit aligned, the\nwrite to misa is suppressed, leaving misa unchanged.",
          "tag_filename": "/build/riscv-privileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "mvendorid_sz",
      "def_filename": "normative_rule_defs/machine.yaml",
      "tags": [
        {
          "name": "norm:mvendorid_sz_acc_op",
          "text": "The mvendorid CSR is a 32-bit read-only register providing the JEDEC\nmanufacturer ID of the provider of the core.",
          "tag_filename": "/build/riscv-privileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "mvendorid_acc",
      "def_filename": "normative_rule_defs/machine.yaml",
      "tags": [
        {
          "name": "norm:mvendorid_sz_acc_op",
          "text": "The mvendorid CSR is a 32-bit read-only register providing the JEDEC\nmanufacturer ID of the provider of the core.",
          "tag_filename": "/build/riscv-privileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "mvendorid_op",
      "def_filename": "normative_rule_defs/machine.yaml",
      "tags": [
        {
          "name": "norm:mvendorid_sz_acc_op",
          "text": "The mvendorid CSR is a 32-bit read-only register providing the JEDEC\nmanufacturer ID of the provider of the core.",
          "tag_filename": "/build/riscv-privileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "mvendorid_always_rd",
      "def_filename": "normative_rule_defs/machine.yaml",
      "tags": [
        {
          "name": "norm:mvendorid_always_rd",
          "text": "This register must be readable in any implementation, but a value of 0 can be returned to\nindicate the field is not implemented or that this is a non-commercial implementation.",
          "tag_filename": "/build/riscv-privileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "mvendorid_enc",
      "def_filename": "normative_rule_defs/machine.yaml",
      "tags": [
        {
          "name": "norm:mvendorid_enc",
          "text": "JEDEC manufacturer IDs are ordinarily encoded as a sequence of one-byte\ncontinuation codes 0x7f, terminated by a one-byte ID not equal to\n0x7f, with an odd parity bit in the most-significant bit of each byte.\nmvendorid encodes the number of one-byte continuation codes in the\nBank field, and encodes the final byte in the Offset field, discarding\nthe parity bit.",
          "tag_filename": "/build/riscv-privileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "mvendorid_bank_1_less_than_JEDEC",
      "def_filename": "normative_rule_defs/machine.yaml",
      "tags": [
        {
          "name": "norm:mvendorid_bank_1_less_than_JEDEC",
          "text": "In JEDEC&#8217;s parlance, the bank number is one greater than the number of\ncontinuation codes; hence, the mvendorid Bank field encodes a value\nthat is one less than the JEDEC bank number.",
          "tag_filename": "/build/riscv-privileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "marchid_sz",
      "def_filename": "normative_rule_defs/machine.yaml",
      "tags": [
        {
          "name": "norm:marchid_sz_acc_op",
          "text": "The marchid CSR is an MXLEN-bit read-only register encoding the base\nmicroarchitecture of the hart.",
          "tag_filename": "/build/riscv-privileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "marchid_acc",
      "def_filename": "normative_rule_defs/machine.yaml",
      "tags": [
        {
          "name": "norm:marchid_sz_acc_op",
          "text": "The marchid CSR is an MXLEN-bit read-only register encoding the base\nmicroarchitecture of the hart.",
          "tag_filename": "/build/riscv-privileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "marchid_op",
      "def_filename": "normative_rule_defs/machine.yaml",
      "tags": [
        {
          "name": "norm:marchid_sz_acc_op",
          "text": "The marchid CSR is an MXLEN-bit read-only register encoding the base\nmicroarchitecture of the hart.",
          "tag_filename": "/build/riscv-privileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "marchid_always_rd",
      "def_filename": "normative_rule_defs/machine.yaml",
      "tags": [
        {
          "name": "norm:marchid_always_rd",
          "text": "This register must be readable in any\nimplementation, but a value of 0 can be returned to indicate the field is not implemented.",
          "tag_filename": "/build/riscv-privileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "mimpid_op",
      "def_filename": "normative_rule_defs/machine.yaml",
      "tags": [
        {
          "name": "norm:mimpid_op",
          "text": "The mimpid CSR provides a unique encoding of the version of the\nprocessor implementation.",
          "tag_filename": "/build/riscv-privileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "mimpid_always_rd",
      "def_filename": "normative_rule_defs/machine.yaml",
      "tags": [
        {
          "name": "norm:mimpid_always_rd",
          "text": "This register must be readable in any\nimplementation, but a value of 0 can be returned to indicate that the field is not implemented.",
          "tag_filename": "/build/riscv-privileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "mhartid_sz",
      "def_filename": "normative_rule_defs/machine.yaml",
      "tags": [
        {
          "name": "norm:mhartid_sz_acc_op",
          "text": "The mhartid CSR is an MXLEN-bit read-only register containing the\ninteger ID of the hardware thread running the code.",
          "tag_filename": "/build/riscv-privileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "mhartid_acc",
      "def_filename": "normative_rule_defs/machine.yaml",
      "tags": [
        {
          "name": "norm:mhartid_sz_acc_op",
          "text": "The mhartid CSR is an MXLEN-bit read-only register containing the\ninteger ID of the hardware thread running the code.",
          "tag_filename": "/build/riscv-privileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "mhartid_op",
      "def_filename": "normative_rule_defs/machine.yaml",
      "tags": [
        {
          "name": "norm:mhartid_sz_acc_op",
          "text": "The mhartid CSR is an MXLEN-bit read-only register containing the\ninteger ID of the hardware thread running the code.",
          "tag_filename": "/build/riscv-privileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "mhartid_always_rd",
      "def_filename": "normative_rule_defs/machine.yaml",
      "tags": [
        {
          "name": "norm:mhartid_always_rd",
          "text": "This register must be readable in any implementation.",
          "tag_filename": "/build/riscv-privileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "mstatus_sz",
      "def_filename": "normative_rule_defs/machine.yaml",
      "tags": [
        {
          "name": "norm:mstatus_sz_acc",
          "text": "The mstatus register is an MXLEN-bit read/write register formatted as\nshown in &lt;&lt;mstatusreg-rv32&gt;&gt; for RV32 and &lt;&lt;mstatusreg&gt;&gt; for RV64.",
          "tag_filename": "/build/riscv-privileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "mstatus_acc",
      "def_filename": "normative_rule_defs/machine.yaml",
      "tags": [
        {
          "name": "norm:mstatus_sz_acc",
          "text": "The mstatus register is an MXLEN-bit read/write register formatted as\nshown in &lt;&lt;mstatusreg-rv32&gt;&gt; for RV32 and &lt;&lt;mstatusreg&gt;&gt; for RV64.",
          "tag_filename": "/build/riscv-privileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "mstatush_sz",
      "def_filename": "normative_rule_defs/machine.yaml",
      "tags": [
        {
          "name": "norm:mstatush_sz_acc",
          "text": "For RV32 only, mstatush is a 32-bit read/write register formatted as shown in &lt;&lt;mstatushreg&gt;&gt;.",
          "tag_filename": "/build/riscv-privileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "mstatush_acc",
      "def_filename": "normative_rule_defs/machine.yaml",
      "tags": [
        {
          "name": "norm:mstatush_sz_acc",
          "text": "For RV32 only, mstatush is a 32-bit read/write register formatted as shown in &lt;&lt;mstatushreg&gt;&gt;.",
          "tag_filename": "/build/riscv-privileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "mstatush_enc",
      "def_filename": "normative_rule_defs/machine.yaml",
      "tags": [
        {
          "name": "norm:mstatush_enc",
          "text": "Bits 30:4 of mstatush generally contain the same fields found in bits 62:36 of mstatus for RV64. Fields SD, SXL, and UXL do not exist in mstatush.",
          "tag_filename": "/build/riscv-privileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "lui_enc",
      "def_filename": "normative_rule_defs/rv-32-64g.yaml",
      "tags": [
        {
          "name": "norm:lui_enc",
          "kind": "instruction",
          "instances": [
            "lui"
          ]
        }
      ]
    },
    {
      "name": "auipc_enc",
      "def_filename": "normative_rule_defs/rv-32-64g.yaml",
      "tags": [
        {
          "name": "norm:auipc_enc",
          "kind": "instruction",
          "instances": [
            "auipc"
          ]
        }
      ]
    },
    {
      "name": "jal_enc",
      "def_filename": "normative_rule_defs/rv-32-64g.yaml",
      "tags": [
        {
          "name": "norm:jal_enc",
          "kind": "instruction",
          "instances": [
            "jal"
          ]
        }
      ]
    },
    {
      "name": "jalr_enc",
      "def_filename": "normative_rule_defs/rv-32-64g.yaml",
      "tags": [
        {
          "name": "norm:jalr_enc",
          "kind": "instruction",
          "instances": [
            "jalr"
          ]
        }
      ]
    },
    {
      "name": "beq_enc",
      "def_filename": "normative_rule_defs/rv-32-64g.yaml",
      "tags": [
        {
          "name": "norm:beq_enc",
          "kind": "instruction",
          "instances": [
            "beq"
          ]
        }
      ]
    },
    {
      "name": "bne_enc",
      "def_filename": "normative_rule_defs/rv-32-64g.yaml",
      "tags": [
        {
          "name": "norm:bne_enc",
          "kind": "instruction",
          "instances": [
            "bne"
          ]
        }
      ]
    },
    {
      "name": "blt_enc",
      "def_filename": "normative_rule_defs/rv-32-64g.yaml",
      "tags": [
        {
          "name": "norm:blt_enc",
          "kind": "instruction",
          "instances": [
            "blt"
          ]
        }
      ]
    },
    {
      "name": "bge_enc",
      "def_filename": "normative_rule_defs/rv-32-64g.yaml",
      "tags": [
        {
          "name": "norm:bge_enc",
          "kind": "instruction",
          "instances": [
            "bge"
          ]
        }
      ]
    },
    {
      "name": "bltu_enc",
      "def_filename": "normative_rule_defs/rv-32-64g.yaml",
      "tags": [
        {
          "name": "norm:bltu_enc",
          "kind": "instruction",
          "instances": [
            "bltu"
          ]
        }
      ]
    },
    {
      "name": "bgeu_enc",
      "def_filename": "normative_rule_defs/rv-32-64g.yaml",
      "tags": [
        {
          "name": "norm:bgeu_enc",
          "kind": "instruction",
          "instances": [
            "bgeu"
          ]
        }
      ]
    },
    {
      "name": "lb_enc",
      "def_filename": "normative_rule_defs/rv-32-64g.yaml",
      "tags": [
        {
          "name": "norm:lb_enc",
          "kind": "instruction",
          "instances": [
            "lb"
          ]
        }
      ]
    },
    {
      "name": "lh_enc",
      "def_filename": "normative_rule_defs/rv-32-64g.yaml",
      "tags": [
        {
          "name": "norm:lh_enc",
          "kind": "instruction",
          "instances": [
            "lh"
          ]
        }
      ]
    },
    {
      "name": "lw_enc",
      "def_filename": "normative_rule_defs/rv-32-64g.yaml",
      "tags": [
        {
          "name": "norm:lw_enc",
          "kind": "instruction",
          "instances": [
            "lw"
          ]
        }
      ]
    },
    {
      "name": "lbu_enc",
      "def_filename": "normative_rule_defs/rv-32-64g.yaml",
      "tags": [
        {
          "name": "norm:lbu_enc",
          "kind": "instruction",
          "instances": [
            "lbu"
          ]
        }
      ]
    },
    {
      "name": "lhu_enc",
      "def_filename": "normative_rule_defs/rv-32-64g.yaml",
      "tags": [
        {
          "name": "norm:lhu_enc",
          "kind": "instruction",
          "instances": [
            "lhu"
          ]
        }
      ]
    },
    {
      "name": "sb_enc",
      "def_filename": "normative_rule_defs/rv-32-64g.yaml",
      "tags": [
        {
          "name": "norm:sb_enc",
          "kind": "instruction",
          "instances": [
            "sb"
          ]
        }
      ]
    },
    {
      "name": "sh_enc",
      "def_filename": "normative_rule_defs/rv-32-64g.yaml",
      "tags": [
        {
          "name": "norm:sh_enc",
          "kind": "instruction",
          "instances": [
            "sh"
          ]
        }
      ]
    },
    {
      "name": "sw_enc",
      "def_filename": "normative_rule_defs/rv-32-64g.yaml",
      "tags": [
        {
          "name": "norm:sw_enc",
          "kind": "instruction",
          "instances": [
            "sw"
          ]
        }
      ]
    },
    {
      "name": "addi_enc",
      "def_filename": "normative_rule_defs/rv-32-64g.yaml",
      "tags": [
        {
          "name": "norm:addi_enc",
          "kind": "instruction",
          "instances": [
            "addi"
          ]
        }
      ]
    },
    {
      "name": "slti_enc",
      "def_filename": "normative_rule_defs/rv-32-64g.yaml",
      "tags": [
        {
          "name": "norm:slti_enc",
          "kind": "instruction",
          "instances": [
            "slti"
          ]
        }
      ]
    },
    {
      "name": "sltiu_enc",
      "def_filename": "normative_rule_defs/rv-32-64g.yaml",
      "tags": [
        {
          "name": "norm:sltiu_enc",
          "kind": "instruction",
          "instances": [
            "sltiu"
          ]
        }
      ]
    },
    {
      "name": "xori_enc",
      "def_filename": "normative_rule_defs/rv-32-64g.yaml",
      "tags": [
        {
          "name": "norm:xori_enc",
          "kind": "instruction",
          "instances": [
            "xori"
          ]
        }
      ]
    },
    {
      "name": "ori_enc",
      "def_filename": "normative_rule_defs/rv-32-64g.yaml",
      "tags": [
        {
          "name": "norm:ori_enc",
          "kind": "instruction",
          "instances": [
            "ori"
          ]
        }
      ]
    },
    {
      "name": "andi_enc",
      "def_filename": "normative_rule_defs/rv-32-64g.yaml",
      "tags": [
        {
          "name": "norm:andi_enc",
          "kind": "instruction",
          "instances": [
            "auipc"
          ]
        }
      ]
    },
    {
      "name": "slli_enc",
      "def_filename": "normative_rule_defs/rv-32-64g.yaml",
      "tags": [
        {
          "name": "norm:slli_enc",
          "kind": "instruction",
          "instances": [
            "slli"
          ]
        }
      ]
    },
    {
      "name": "srli_enc",
      "def_filename": "normative_rule_defs/rv-32-64g.yaml",
      "tags": [
        {
          "name": "norm:srli_enc",
          "kind": "instruction",
          "instances": [
            "srli"
          ]
        }
      ]
    },
    {
      "name": "srai_enc",
      "def_filename": "normative_rule_defs/rv-32-64g.yaml",
      "tags": [
        {
          "name": "norm:srai_enc",
          "kind": "instruction",
          "instances": [
            "srai"
          ]
        }
      ]
    },
    {
      "name": "add_enc",
      "def_filename": "normative_rule_defs/rv-32-64g.yaml",
      "tags": [
        {
          "name": "norm:add_enc",
          "kind": "instruction",
          "instances": [
            "add"
          ]
        }
      ]
    },
    {
      "name": "sub_enc",
      "def_filename": "normative_rule_defs/rv-32-64g.yaml",
      "tags": [
        {
          "name": "norm:sub_enc",
          "kind": "instruction",
          "instances": [
            "sub"
          ]
        }
      ]
    },
    {
      "name": "sll_enc",
      "def_filename": "normative_rule_defs/rv-32-64g.yaml",
      "tags": [
        {
          "name": "norm:sll_enc",
          "kind": "instruction",
          "instances": [
            "sll"
          ]
        }
      ]
    },
    {
      "name": "slt_enc",
      "def_filename": "normative_rule_defs/rv-32-64g.yaml",
      "tags": [
        {
          "name": "norm:slt_enc",
          "kind": "instruction",
          "instances": [
            "slt"
          ]
        }
      ]
    },
    {
      "name": "sltu_enc",
      "def_filename": "normative_rule_defs/rv-32-64g.yaml",
      "tags": [
        {
          "name": "norm:sltu_enc",
          "kind": "instruction",
          "instances": [
            "sltu"
          ]
        }
      ]
    },
    {
      "name": "xor_enc",
      "def_filename": "normative_rule_defs/rv-32-64g.yaml",
      "tags": [
        {
          "name": "norm:xor_enc",
          "kind": "instruction",
          "instances": [
            "xor"
          ]
        }
      ]
    },
    {
      "name": "srl_enc",
      "def_filename": "normative_rule_defs/rv-32-64g.yaml",
      "tags": [
        {
          "name": "norm:srl_enc",
          "kind": "instruction",
          "instances": [
            "srl"
          ]
        }
      ]
    },
    {
      "name": "sra_enc",
      "def_filename": "normative_rule_defs/rv-32-64g.yaml",
      "tags": [
        {
          "name": "norm:sra_enc",
          "kind": "instruction",
          "instances": [
            "sra"
          ]
        }
      ]
    },
    {
      "name": "or_enc",
      "def_filename": "normative_rule_defs/rv-32-64g.yaml",
      "tags": [
        {
          "name": "norm:or_enc",
          "kind": "instruction",
          "instances": [
            "or"
          ]
        }
      ]
    },
    {
      "name": "and_enc",
      "def_filename": "normative_rule_defs/rv-32-64g.yaml",
      "tags": [
        {
          "name": "norm:and_enc",
          "kind": "instruction",
          "instances": [
            "and"
          ]
        }
      ]
    },
    {
      "name": "fence_enc",
      "def_filename": "normative_rule_defs/rv-32-64g.yaml",
      "tags": [
        {
          "name": "norm:fence_enc",
          "kind": "instruction",
          "instances": [
            "fence"
          ]
        }
      ]
    },
    {
      "name": "fence-tso_enc",
      "def_filename": "normative_rule_defs/rv-32-64g.yaml",
      "tags": [
        {
          "name": "norm:fence-tso_enc",
          "kind": "instruction",
          "instances": [
            "fence-tso"
          ]
        }
      ]
    },
    {
      "name": "pause_enc",
      "def_filename": "normative_rule_defs/rv-32-64g.yaml",
      "tags": [
        {
          "name": "norm:pause_enc",
          "kind": "instruction",
          "instances": [
            "pause"
          ]
        }
      ]
    },
    {
      "name": "ecall_enc",
      "def_filename": "normative_rule_defs/rv-32-64g.yaml",
      "tags": [
        {
          "name": "norm:ecall_enc",
          "kind": "instruction",
          "instances": [
            "ecall"
          ]
        }
      ]
    },
    {
      "name": "ebreak_enc",
      "def_filename": "normative_rule_defs/rv-32-64g.yaml",
      "tags": [
        {
          "name": "norm:ebreak_enc",
          "kind": "instruction",
          "instances": [
            "ebreak"
          ]
        }
      ]
    },
    {
      "name": "lwu_enc",
      "def_filename": "normative_rule_defs/rv-32-64g.yaml",
      "tags": [
        {
          "name": "norm:lwu_enc",
          "kind": "instruction",
          "instances": [
            "lwu"
          ]
        }
      ]
    },
    {
      "name": "ld_enc",
      "def_filename": "normative_rule_defs/rv-32-64g.yaml",
      "tags": [
        {
          "name": "norm:ld_enc",
          "kind": "instruction",
          "instances": [
            "ld"
          ]
        }
      ]
    },
    {
      "name": "sd_enc",
      "def_filename": "normative_rule_defs/rv-32-64g.yaml",
      "tags": [
        {
          "name": "norm:sd_enc",
          "kind": "instruction",
          "instances": [
            "sd"
          ]
        }
      ]
    },
    {
      "name": "addiw_enc",
      "def_filename": "normative_rule_defs/rv-32-64g.yaml",
      "tags": [
        {
          "name": "norm:addiw_enc",
          "kind": "instruction",
          "instances": [
            "addiw"
          ]
        }
      ]
    },
    {
      "name": "slliw_enc",
      "def_filename": "normative_rule_defs/rv-32-64g.yaml",
      "tags": [
        {
          "name": "norm:slliw_enc",
          "kind": "instruction",
          "instances": [
            "slliw"
          ]
        }
      ]
    },
    {
      "name": "srliw_enc",
      "def_filename": "normative_rule_defs/rv-32-64g.yaml",
      "tags": [
        {
          "name": "norm:srliw_enc",
          "kind": "instruction",
          "instances": [
            "srliw"
          ]
        }
      ]
    },
    {
      "name": "sraiw_enc",
      "def_filename": "normative_rule_defs/rv-32-64g.yaml",
      "tags": [
        {
          "name": "norm:sraiw_enc",
          "kind": "instruction",
          "instances": [
            "sraiw"
          ]
        }
      ]
    },
    {
      "name": "addw_enc",
      "def_filename": "normative_rule_defs/rv-32-64g.yaml",
      "tags": [
        {
          "name": "norm:addw_enc",
          "kind": "instruction",
          "instances": [
            "addw"
          ]
        }
      ]
    },
    {
      "name": "subw_enc",
      "def_filename": "normative_rule_defs/rv-32-64g.yaml",
      "tags": [
        {
          "name": "norm:subw_enc",
          "kind": "instruction",
          "instances": [
            "subw"
          ]
        }
      ]
    },
    {
      "name": "sllw_enc",
      "def_filename": "normative_rule_defs/rv-32-64g.yaml",
      "tags": [
        {
          "name": "norm:sllw_enc",
          "kind": "instruction",
          "instances": [
            "sllw"
          ]
        }
      ]
    },
    {
      "name": "srlw_enc",
      "def_filename": "normative_rule_defs/rv-32-64g.yaml",
      "tags": [
        {
          "name": "norm:srlw_enc",
          "kind": "instruction",
          "instances": [
            "srlw"
          ]
        }
      ]
    },
    {
      "name": "sraw_enc",
      "def_filename": "normative_rule_defs/rv-32-64g.yaml",
      "tags": [
        {
          "name": "norm:sraw_enc",
          "kind": "instruction",
          "instances": [
            "sraw"
          ]
        }
      ]
    },
    {
      "name": "mul_enc",
      "def_filename": "normative_rule_defs/rv-32-64g.yaml",
      "tags": [
        {
          "name": "norm:mul_enc",
          "kind": "instruction",
          "instances": [
            "mul"
          ]
        }
      ]
    },
    {
      "name": "mulh_enc",
      "def_filename": "normative_rule_defs/rv-32-64g.yaml",
      "tags": [
        {
          "name": "norm:mulh_enc",
          "kind": "instruction",
          "instances": [
            "mulh"
          ]
        }
      ]
    },
    {
      "name": "mulhsu_enc",
      "def_filename": "normative_rule_defs/rv-32-64g.yaml",
      "tags": [
        {
          "name": "norm:mulhsu_enc",
          "kind": "instruction",
          "instances": [
            "mulhsu"
          ]
        }
      ]
    },
    {
      "name": "mulhu_enc",
      "def_filename": "normative_rule_defs/rv-32-64g.yaml",
      "tags": [
        {
          "name": "norm:mulhu_enc",
          "kind": "instruction",
          "instances": [
            "mulhu"
          ]
        }
      ]
    },
    {
      "name": "div_enc",
      "def_filename": "normative_rule_defs/rv-32-64g.yaml",
      "tags": [
        {
          "name": "norm:div_enc",
          "kind": "instruction",
          "instances": [
            "div"
          ]
        }
      ]
    },
    {
      "name": "divu_enc",
      "def_filename": "normative_rule_defs/rv-32-64g.yaml",
      "tags": [
        {
          "name": "norm:divu_enc",
          "kind": "instruction",
          "instances": [
            "divu"
          ]
        }
      ]
    },
    {
      "name": "rem_enc",
      "def_filename": "normative_rule_defs/rv-32-64g.yaml",
      "tags": [
        {
          "name": "norm:rem_enc",
          "kind": "instruction",
          "instances": [
            "rem"
          ]
        }
      ]
    },
    {
      "name": "remu_enc",
      "def_filename": "normative_rule_defs/rv-32-64g.yaml",
      "tags": [
        {
          "name": "norm:remu_enc",
          "kind": "instruction",
          "instances": [
            "remu"
          ]
        }
      ]
    },
    {
      "name": "mulw_enc",
      "def_filename": "normative_rule_defs/rv-32-64g.yaml",
      "tags": [
        {
          "name": "norm:mulw_enc",
          "kind": "instruction",
          "instances": [
            "mulw"
          ]
        }
      ]
    },
    {
      "name": "divw_enc",
      "def_filename": "normative_rule_defs/rv-32-64g.yaml",
      "tags": [
        {
          "name": "norm:divw_enc",
          "kind": "instruction",
          "instances": [
            "divw"
          ]
        }
      ]
    },
    {
      "name": "divuw_enc",
      "def_filename": "normative_rule_defs/rv-32-64g.yaml",
      "tags": [
        {
          "name": "norm:divuw_enc",
          "kind": "instruction",
          "instances": [
            "divuw"
          ]
        }
      ]
    },
    {
      "name": "remw_enc",
      "def_filename": "normative_rule_defs/rv-32-64g.yaml",
      "tags": [
        {
          "name": "norm:remw_enc",
          "kind": "instruction",
          "instances": [
            "remw"
          ]
        }
      ]
    },
    {
      "name": "remuw_enc",
      "def_filename": "normative_rule_defs/rv-32-64g.yaml",
      "tags": [
        {
          "name": "norm:remuw_enc",
          "kind": "instruction",
          "instances": [
            "remuw"
          ]
        }
      ]
    },
    {
      "name": "rv32i_xreg_sz",
      "def_filename": "normative_rule_defs/rv32.yaml",
      "summary": "RV32I XLEN",
      "tags": [
        {
          "name": "norm:rv32i_xreg_sz",
          "text": "For RV32I, the 32 x registers are each 32 bits wide,\ni.e., XLEN=32.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "rv32i_other_xregs",
      "def_filename": "normative_rule_defs/rv32.yaml",
      "summary": "Registers x1 to x31",
      "tags": [
        {
          "name": "norm:rv32i_rv64i_other_xregs",
          "text": "General purpose registers x1-x31 hold values that various\ninstructions interpret as a collection of Boolean values, or as two's\ncomplement signed binary integers or unsigned binary integers.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "pcreg_op",
      "def_filename": "normative_rule_defs/rv32.yaml",
      "description": "The `pc` contains a byte address so is incremented by 4 for 32-bit instructions and\n2 for 16-bit instructions.\n",
      "tags": [
        {
          "name": "norm:pcreg_op",
          "text": "There is one additional unprivileged register: the program counter pc\nholds the address of the current instruction.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "slti_op",
      "def_filename": "normative_rule_defs/rv32.yaml",
      "tags": [
        {
          "name": "norm:slti_sltiu_op",
          "text": "SLTI (set less than immediate) places the value 1 in register rd if\nregister rs1 is less than the sign-extended immediate when both are\ntreated as signed numbers, else 0 is written to rd. SLTIU is similar\nbut compares the values as unsigned numbers (i.e., the immediate is\nfirst sign-extended to XLEN bits then treated as an unsigned number).",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "sltiu_op",
      "def_filename": "normative_rule_defs/rv32.yaml",
      "tags": [
        {
          "name": "norm:slti_sltiu_op",
          "text": "SLTI (set less than immediate) places the value 1 in register rd if\nregister rs1 is less than the sign-extended immediate when both are\ntreated as signed numbers, else 0 is written to rd. SLTIU is similar\nbut compares the values as unsigned numbers (i.e., the immediate is\nfirst sign-extended to XLEN bits then treated as an unsigned number).",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "x0eq0",
      "def_filename": "normative_rule_defs/rv32.yaml",
      "summary": "Register x0 always zero",
      "tags": [
        {
          "name": "norm:x0eq0",
          "text": "Register x0 is hardwired with all bits equal to 0.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "taken_cti_misaligned_exc",
      "def_filename": "normative_rule_defs/rv32.yaml",
      "summary": "CTI misaligned execution",
      "tags": [
        {
          "name": "norm:taken_cti_misaligned_exc",
          "text": "An instruction-address-misaligned exception is generated on a taken branch\nor unconditional jump if the target address is not IALIGN-bit aligned.\nThis exception is reported on the branch or jump instruction, not on the target instruction.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "cond_br_no_ia_misaligned_exc_not_taken",
      "def_filename": "normative_rule_defs/rv32.yaml",
      "summary": "No IA misaligned exc on not taken",
      "tags": [
        {
          "name": "norm:cond_br_no_ia_misaligned_exc_not_taken",
          "text": "No instruction-address-misaligned exception is generated\nfor a conditional branch that is not taken.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "imm_always_sex",
      "def_filename": "normative_rule_defs/rv32.yaml",
      "summary": "Immediates always sign-extended",
      "tags": [
        {
          "name": "norm:imm_always_sex",
          "text": "Except for the 5-bit immediates used in CSR instructions (&lt;&lt;csrinsts&gt;&gt;),\nimmediates are always sign-extended",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "addi_op",
      "def_filename": "normative_rule_defs/rv32.yaml",
      "tags": [
        {
          "name": "norm:addi_op",
          "text": "ADDI adds the sign-extended 12-bit immediate to register rs1.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "addi_overflow",
      "def_filename": "normative_rule_defs/rv32.yaml",
      "summary": "Treatment of overflow",
      "tags": [
        {
          "name": "norm:addi_overflow",
          "text": "Arithmetic overflow is ignored and the result is simply the low XLEN bits of the result.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "andi_op",
      "def_filename": "normative_rule_defs/rv32.yaml",
      "tags": [
        {
          "name": "norm:andi_ori_xori_op",
          "text": "ANDI, ORI, XORI are logical operations that perform bitwise AND, OR, and\nXOR on register rs1 and the sign-extended 12-bit immediate and place\nthe result in rd.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "ori_op",
      "def_filename": "normative_rule_defs/rv32.yaml",
      "tags": [
        {
          "name": "norm:andi_ori_xori_op",
          "text": "ANDI, ORI, XORI are logical operations that perform bitwise AND, OR, and\nXOR on register rs1 and the sign-extended 12-bit immediate and place\nthe result in rd.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "xori_op",
      "def_filename": "normative_rule_defs/rv32.yaml",
      "tags": [
        {
          "name": "norm:andi_ori_xori_op",
          "text": "ANDI, ORI, XORI are logical operations that perform bitwise AND, OR, and\nXOR on register rs1 and the sign-extended 12-bit immediate and place\nthe result in rd.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "slli_op",
      "def_filename": "normative_rule_defs/rv32.yaml",
      "tags": [
        {
          "name": "norm:slli_op",
          "text": "SLLI is a logical left shift (zeros are shifted into the lower bits);",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "srli_op",
      "def_filename": "normative_rule_defs/rv32.yaml",
      "tags": [
        {
          "name": "norm:srli_op",
          "text": "SRLI is a logical right shift (zeros are shifted into the upper bits);",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "srai_op",
      "def_filename": "normative_rule_defs/rv32.yaml",
      "tags": [
        {
          "name": "norm:srai_op",
          "text": "SRAI is an arithmetic right shift (the original sign bit is copied into the vacated upper bits).",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "lui_op",
      "def_filename": "normative_rule_defs/rv32.yaml",
      "tags": [
        {
          "name": "norm:lui_op",
          "text": "LUI places the 32-bit U-immediate value into the\ndestination register rd, filling in the lowest 12 bits with zeros.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "auipc_op",
      "def_filename": "normative_rule_defs/rv32.yaml",
      "tags": [
        {
          "name": "norm:auipc_op",
          "text": "AUIPC forms a 32-bit offset from\nthe U-immediate, filling in the lowest 12 bits with zeros, adds this\noffset to the address of the AUIPC instruction, then places the result\nin register rd.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "R-type_operands",
      "def_filename": "normative_rule_defs/rv32.yaml",
      "tags": [
        {
          "name": "norm:R-type_operands",
          "text": "All operations read\nthe rs1 and rs2 registers as source operands and write the result into register rd.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "add_op",
      "def_filename": "normative_rule_defs/rv32.yaml",
      "tags": [
        {
          "name": "norm:add_op",
          "text": "ADD performs the addition of rs1 and rs2.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "sub_op",
      "def_filename": "normative_rule_defs/rv32.yaml",
      "tags": [
        {
          "name": "norm:sub_op",
          "text": "SUB performs the subtraction of rs2 from rs1.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "add_overflow",
      "def_filename": "normative_rule_defs/rv32.yaml",
      "tags": [
        {
          "name": "norm:add_sub_overflow",
          "text": "Overflows are ignored and the low XLEN bits of results are written to the destination rd.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "sub_overflow",
      "def_filename": "normative_rule_defs/rv32.yaml",
      "tags": [
        {
          "name": "norm:add_sub_overflow",
          "text": "Overflows are ignored and the low XLEN bits of results are written to the destination rd.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "slt_op",
      "def_filename": "normative_rule_defs/rv32.yaml",
      "tags": [
        {
          "name": "norm:slt_sltu_op",
          "text": "SLT and SLTU perform signed and unsigned compares respectively, writing 1 to rd if\nrs1 &lt; rs2, 0 otherwise.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "sltu_op",
      "def_filename": "normative_rule_defs/rv32.yaml",
      "tags": [
        {
          "name": "norm:slt_sltu_op",
          "text": "SLT and SLTU perform signed and unsigned compares respectively, writing 1 to rd if\nrs1 &lt; rs2, 0 otherwise.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "and_op",
      "def_filename": "normative_rule_defs/rv32.yaml",
      "tags": [
        {
          "name": "norm:and_or_xor_op",
          "text": "AND, OR, and XOR perform bitwise logical operations.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "or_op",
      "def_filename": "normative_rule_defs/rv32.yaml",
      "tags": [
        {
          "name": "norm:and_or_xor_op",
          "text": "AND, OR, and XOR perform bitwise logical operations.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "xor_op",
      "def_filename": "normative_rule_defs/rv32.yaml",
      "tags": [
        {
          "name": "norm:and_or_xor_op",
          "text": "AND, OR, and XOR perform bitwise logical operations.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "sll_op",
      "def_filename": "normative_rule_defs/rv32.yaml",
      "tags": [
        {
          "name": "norm:sll_srl_sra_op",
          "text": "SLL, SRL, and SRA perform logical left, logical right, and arithmetic\nright shifts on the value in register rs1 by the shift amount held in\nthe lower 5 bits of register rs2.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "srl_op",
      "def_filename": "normative_rule_defs/rv32.yaml",
      "tags": [
        {
          "name": "norm:sll_srl_sra_op",
          "text": "SLL, SRL, and SRA perform logical left, logical right, and arithmetic\nright shifts on the value in register rs1 by the shift amount held in\nthe lower 5 bits of register rs2.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "sra_op",
      "def_filename": "normative_rule_defs/rv32.yaml",
      "tags": [
        {
          "name": "norm:sll_srl_sra_op",
          "text": "SLL, SRL, and SRA perform logical left, logical right, and arithmetic\nright shifts on the value in register rs1 by the shift amount held in\nthe lower 5 bits of register rs2.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "no_cti_delay_slots",
      "def_filename": "normative_rule_defs/rv32.yaml",
      "tags": [
        {
          "name": "norm:no_cti_delay_slots",
          "text": "Control transfer instructions in RV32I\ndo not have architecturally visible delay slots.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "ia_fault_exc_on_target",
      "def_filename": "normative_rule_defs/rv32.yaml",
      "tags": [
        {
          "name": "norm:ia_fault_exc_on_target",
          "text": "If an instruction access-fault or instruction page-fault exception\noccurs on the target of a jump or taken branch, the exception is\nreported on the target instruction, not on the jump or branch instruction.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "jal_target",
      "def_filename": "normative_rule_defs/rv32.yaml",
      "tags": [
        {
          "name": "norm:jal_target",
          "text": "The offset is sign-extended and added to the address of the jump instruction to\nform the jump target address.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "jal_op",
      "def_filename": "normative_rule_defs/rv32.yaml",
      "tags": [
        {
          "name": "norm:jal_op",
          "text": "JAL stores the address of the instruction\nfollowing the jump ('pc'+4) into register rd.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "jalr_target",
      "def_filename": "normative_rule_defs/rv32.yaml",
      "tags": [
        {
          "name": "norm:jalr_target",
          "text": "The target address is obtained by adding the\nsign-extended 12-bit I-immediate to the register rs1, then setting the\nleast-significant bit of the result to zero.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "jalr_op",
      "def_filename": "normative_rule_defs/rv32.yaml",
      "tags": [
        {
          "name": "norm:jalr_op",
          "text": "The address of the\ninstruction following the jump (pc+4) is written to register rd.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "br_target",
      "def_filename": "normative_rule_defs/rv32.yaml",
      "tags": [
        {
          "name": "norm:br_target",
          "text": "The 12-bit B-immediate encodes signed offsets in multiples of 2 bytes. The offset\nis sign-extended and added to the address of the branch instruction to give the target address.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "beq_op",
      "def_filename": "normative_rule_defs/rv32.yaml",
      "tags": [
        {
          "name": "norm:beq_bne_op",
          "text": "BEQ and BNE take the branch if registers rs1 and rs2 are equal or unequal respectively.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "bne_op",
      "def_filename": "normative_rule_defs/rv32.yaml",
      "tags": [
        {
          "name": "norm:beq_bne_op",
          "text": "BEQ and BNE take the branch if registers rs1 and rs2 are equal or unequal respectively.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "blt_op",
      "def_filename": "normative_rule_defs/rv32.yaml",
      "tags": [
        {
          "name": "norm:blt_bltu_op",
          "text": "BLT and BLTU take the branch if rs1 is less than rs2, using signed and\nunsigned comparison respectively.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "bltu_op",
      "def_filename": "normative_rule_defs/rv32.yaml",
      "tags": [
        {
          "name": "norm:blt_bltu_op",
          "text": "BLT and BLTU take the branch if rs1 is less than rs2, using signed and\nunsigned comparison respectively.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "bge_op",
      "def_filename": "normative_rule_defs/rv32.yaml",
      "tags": [
        {
          "name": "norm:bge_bgeu_op",
          "text": "BGE and BGEU take the branch if rs1 is greater than or equal to rs2,\nusing signed and unsigned comparison respectively.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "bgeu_op",
      "def_filename": "normative_rule_defs/rv32.yaml",
      "tags": [
        {
          "name": "norm:bge_bgeu_op",
          "text": "BGE and BGEU take the branch if rs1 is greater than or equal to rs2,\nusing signed and unsigned comparison respectively.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "load_exc_x0",
      "def_filename": "normative_rule_defs/rv32.yaml",
      "tags": [
        {
          "name": "norm:load_exc_x0",
          "text": "Loads with a destination of\nx0 must still raise any exceptions and cause any other side effects\neven though the load value is discarded.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "ENDIANNESS_LITTLE_OR_BIG",
      "def_filename": "normative_rule_defs/rv32.yaml",
      "tags": [
        {
          "name": "norm:ENDIANNESS_LITTLE_OR_BIG",
          "text": "The EEI will define whether the memory system is little-endian or big-endian.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "ldst_endian_byte_invariant",
      "def_filename": "normative_rule_defs/rv32.yaml",
      "tags": [
        {
          "name": "norm:ldst_endian_byte_invariant",
          "text": "In RISC-V, endianness is byte-address invariant.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "ldst_endian_byte_op",
      "def_filename": "normative_rule_defs/rv32.yaml",
      "tags": [
        {
          "name": "norm:ldst_endian_byte_op",
          "text": "In a system for which endianness is byte-address invariant, the\nfollowing property holds: if a byte is stored to memory at some address\nin some endianness, then a byte-sized load from that address in any\nendianness returns the stored value.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "ldst_little_endian_op",
      "def_filename": "normative_rule_defs/rv32.yaml",
      "tags": [
        {
          "name": "norm:ldst_little_endian_op",
          "text": "In a little-endian configuration, multibyte stores write the\nleast-significant register byte at the lowest memory byte address,\nfollowed by the other register bytes in ascending order of their\nsignificance. Loads similarly transfer the contents of the lesser memory\nbyte addresses to the less-significant register bytes.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "ldst_big_endian_op",
      "def_filename": "normative_rule_defs/rv32.yaml",
      "tags": [
        {
          "name": "norm:ldst_big_endian_op",
          "text": "In a big-endian configuration, multibyte stores write the\nmost-significant register byte at the lowest memory byte address,\nfollowed by the other register bytes in descending order of their\nsignificance. Loads similarly transfer the contents of the greater\nmemory byte addresses to the less-significant register bytes.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "ldst_ea",
      "def_filename": "normative_rule_defs/rv32.yaml",
      "tags": [
        {
          "name": "norm:ldst_ea",
          "text": "The effective address is obtained by adding register rs1 to the\nsign-extended 12-bit offset.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "ldst_no_exc_aligned",
      "def_filename": "normative_rule_defs/rv32.yaml",
      "tags": [
        {
          "name": "norm:ldst_no_exc_aligned",
          "text": "loads and stores whose effective addresses are\nnaturally aligned shall not raise an address-misaligned exception.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "load_op",
      "def_filename": "normative_rule_defs/rv32.yaml",
      "tags": [
        {
          "name": "norm:load_op",
          "text": "Loads copy a value from memory to register rd.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "store_op",
      "def_filename": "normative_rule_defs/rv32.yaml",
      "tags": [
        {
          "name": "norm:store_op",
          "text": "Stores copy the value in register rs2 to memory.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "lw_op",
      "def_filename": "normative_rule_defs/rv32.yaml",
      "tags": [
        {
          "name": "norm:lw_op",
          "text": "The LW instruction loads a 32-bit value from memory into rd.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "lh_op",
      "def_filename": "normative_rule_defs/rv32.yaml",
      "tags": [
        {
          "name": "norm:lh_op",
          "text": "LH loads a 16-bit value from memory, then sign-extends to 32-bits before storing\nin rd.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "lhu_op",
      "def_filename": "normative_rule_defs/rv32.yaml",
      "tags": [
        {
          "name": "norm:lhu_op",
          "text": "LHU loads a 16-bit value from memory but then zero extends to\n32-bits before storing in rd.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "lb_op",
      "def_filename": "normative_rule_defs/rv32.yaml",
      "tags": [
        {
          "name": "norm:lb_lbu_op",
          "text": "LB and LBU are defined analogously for 8-bit values.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        },
        {
          "name": "norm:lh_op",
          "text": "LH loads a 16-bit value from memory, then sign-extends to 32-bits before storing\nin rd.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "lbu_op",
      "def_filename": "normative_rule_defs/rv32.yaml",
      "tags": [
        {
          "name": "norm:lb_lbu_op",
          "text": "LB and LBU are defined analogously for 8-bit values.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        },
        {
          "name": "norm:lhu_op",
          "text": "LHU loads a 16-bit value from memory but then zero extends to\n32-bits before storing in rd.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "sw_op",
      "def_filename": "normative_rule_defs/rv32.yaml",
      "tags": [
        {
          "name": "norm:sw_sh_sb_op",
          "text": "The SW, SH, and SB instructions store 32-bit, 16-bit, and\n8-bit values from the low bits of register rs2 to memory.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "sh_op",
      "def_filename": "normative_rule_defs/rv32.yaml",
      "tags": [
        {
          "name": "norm:sw_sh_sb_op",
          "text": "The SW, SH, and SB instructions store 32-bit, 16-bit, and\n8-bit values from the low bits of register rs2 to memory.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "sb_op",
      "def_filename": "normative_rule_defs/rv32.yaml",
      "tags": [
        {
          "name": "norm:sw_sh_sb_op",
          "text": "The SW, SH, and SB instructions store 32-bit, 16-bit, and\n8-bit values from the low bits of register rs2 to memory.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "MISALIGNED_LDST_EEI_DEPENDENT_BEHAVIOR",
      "def_filename": "normative_rule_defs/rv32.yaml",
      "tags": [
        {
          "name": "norm:MISALIGNED_LDST_EEI_DEPENDENT_BEHAVIOR",
          "text": "Loads and stores whose effective address is not naturally aligned to the\nreferenced datatype (i.e., the effective address is not divisible by the\nsize of the access in bytes) have behavior dependent on the EEI.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "MISALIGNED_LDST_FULLY_HW_SUPPORTED",
      "def_filename": "normative_rule_defs/rv32.yaml",
      "tags": [
        {
          "name": "norm:MISALIGNED_LDST_FULLY_HW_SUPPORTED",
          "text": "misaligned loads and stores can be handled in hardware",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "MISALIGNED_LDST_INVISIBLE_TRAP",
      "def_filename": "normative_rule_defs/rv32.yaml",
      "tags": [
        {
          "name": "norm:MISALIGNED_LDST_INVISIBLE_TRAP",
          "text": "via an invisible trap into the execution environment implementation",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "MISALIGNED_LDST_HW_OR_INVISIBLE_TRAP_FUNC_OF_ADDR",
      "def_filename": "normative_rule_defs/rv32.yaml",
      "tags": [
        {
          "name": "norm:MISALIGNED_LDST_HW_OR_INVISIBLE_TRAP_FUNC_OF_ADDR",
          "text": "combination of hardware and invisible trap depending on address.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "MISALIGNED_LDST_FULLY_HW_SUPPORTED_OR_VISIBLE_TRAP",
      "def_filename": "normative_rule_defs/rv32.yaml",
      "tags": [
        {
          "name": "norm:MISALIGNED_LDST_FULLY_HW_SUPPORTED_OR_VISIBLE_TRAP",
          "text": "loads and stores that are not naturally aligned\nmay either complete execution successfully or raise an exception.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "MISALIGNED_LDST_CONTAINED_OR_FATAL_TRAP",
      "def_filename": "normative_rule_defs/rv32.yaml",
      "tags": [
        {
          "name": "norm:MISALIGNED_LDST_CONTAINED_OR_FATAL_TRAP",
          "text": "When an EEI does not guarantee misaligned loads and\nstores are handled invisibly, the EEI must define if exceptions caused\nby address misalignment result in a contained trap (allowing software\nrunning inside the execution environment to handle the trap) or a fatal\ntrap (terminating execution).",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "ldst_addr_misaligned_or_access_fault_exc",
      "def_filename": "normative_rule_defs/rv32.yaml",
      "tags": [
        {
          "name": "norm:ldst_addr_misaligned_or_access_fault_exc",
          "text": "The exception raised can be either an\naddress-misaligned exception or an access-fault exception.\nFor a memory access that would otherwise be able\nto complete except for the misalignment, an access-fault exception can\nbe raised instead of an address-misaligned exception if the misaligned\naccess should not be emulated, e.g., if accesses to the memory region\nhave side effects.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "ldst_atomicity_for_aligned",
      "def_filename": "normative_rule_defs/rv32.yaml",
      "tags": [
        {
          "name": "norm:ldst_atomicity_for_aligned",
          "text": "naturally aligned\nloads and stores are guaranteed to execute atomically",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "fence_op",
      "def_filename": "normative_rule_defs/rv32.yaml",
      "tags": [
        {
          "name": "norm:fence_op",
          "text": "A FENCE\n(with fm=0000) orders all memory operations in its predecessor set\nbefore all memory operations in its successor set.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "fence-tso_op",
      "def_filename": "normative_rule_defs/rv32.yaml",
      "tags": [
        {
          "name": "norm:fence-tso_op",
          "text": "FENCE.TSO orders\nall load operations in its predecessor set before all memory operations\nin its successor set, and all store operations in its predecessor set\nbefore all store operations in its successor set. This leaves non-AMO\nstore operations in the FENCE.TSO's predecessor set unordered with\nnon-AMO loads in its successor set.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "fence-tso_ordering_rw_rw_ok",
      "def_filename": "normative_rule_defs/rv32.yaml",
      "tags": [
        {
          "name": "norm:fence-tso_ordering_rw_rw_ok",
          "text": "Because FENCE RW,RW imposes a superset of the orderings that FENCE.TSO\nimposes, it is correct to ignore the fm field and implement FENCE.TSO as FENCE RW,RW.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "fence_unused_flds_rsv",
      "def_filename": "normative_rule_defs/rv32.yaml",
      "tags": [
        {
          "name": "norm:fence_unused_flds_rsv",
          "text": "The unused fields in the FENCE\ninstructions--rs1 and rd--are reserved\nfor finer-grain fences in future extensions. For forward compatibility,\nbase implementations shall ignore these fields",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "fence_cons_ok",
      "def_filename": "normative_rule_defs/rv32.yaml",
      "tags": [
        {
          "name": "norm:fence_cons_ok",
          "text": "We chose a relaxed memory model to allow high performance from simple\nmachine implementations and from likely future coprocessor or\naccelerator extensions. We separate out I/O ordering from memory R/W\nordering to avoid unnecessary serialization within a device-driver hart\nand also to support alternative non-memory paths to control added\ncoprocessors or I/O devices. Simple implementations may additionally\nignore the predecessor and successor fields and always execute a\nconservative FENCE on all operations.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "ecall_op",
      "def_filename": "normative_rule_defs/rv32.yaml",
      "tags": [
        {
          "name": "norm:ecall_op",
          "text": "The ECALL instruction is used to make a service request to the execution environment.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "ebreak_op",
      "def_filename": "normative_rule_defs/rv32.yaml",
      "tags": [
        {
          "name": "norm:ebreak_op",
          "text": "The EBREAK instruction is used to return control to a debugging environment.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "fence_null_pred_succ_inter",
      "def_filename": "normative_rule_defs/rv32.yaml",
      "tags": [
        {
          "name": "norm:fence_null_pred_succ_inter",
          "text": "As another example, a FENCE instruction with a zero pred field and a\nzero fm field is a HINT; the succ, rs1, and rd fields encode the\narguments to the HINT. A simple implementation can simply execute the\nHINT as a FENCE that orders the null set of prior memory accesses before\nwhichever subsequent memory accesses are encoded in the succ field.\nSince the intersection of the predecessor and successor sets is null,\nthe instruction imposes no memory orderings, and so it has no\narchitecturally visible effect.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "rv64i_xreg_sz",
      "def_filename": "normative_rule_defs/rv64.yaml",
      "summary": "RV64I XLEN",
      "tags": [
        {
          "name": "norm:rv64i_xreg_sz",
          "text": "RV64I widens the integer registers and supported user address space to\n64 bits (XLEN=64 in &lt;&lt;gprs&gt;&gt;).",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "rv64_w_sex",
      "def_filename": "normative_rule_defs/rv64.yaml",
      "tags": [
        {
          "name": "norm:rv64_w_sex",
          "text": "These \"*W\"\ninstructions ignore the upper 32 bits of their inputs and always produce\n32-bit signed values, sign-extending them to 64 bits, i.e. bits XLEN-1\nthrough 31 are equal.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "rv64i_other_xregs",
      "def_filename": "normative_rule_defs/rv64.yaml",
      "summary": "Registers x1 to x31",
      "tags": [
        {
          "name": "norm:rv32i_rv64i_other_xregs",
          "text": "General purpose registers x1-x31 hold values that various\ninstructions interpret as a collection of Boolean values, or as two's\ncomplement signed binary integers or unsigned binary integers.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "addiw_op",
      "def_filename": "normative_rule_defs/rv64.yaml",
      "tags": [
        {
          "name": "norm:addiw_op",
          "text": "ADDIW is an RV64I instruction that adds the sign-extended 12-bit\nimmediate to register rs1 and produces the proper sign extension of a\n32-bit result in rd.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "slliw_op",
      "def_filename": "normative_rule_defs/rv64.yaml",
      "tags": [
        {
          "name": "norm:slliw_srliw_sraiw_op",
          "text": "SLLIW, SRLIW, and SRAIW are RV64I-only instructions that are analogously\ndefined but operate on 32-bit values and sign-extend their 32-bit\nresults to 64 bits.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "srliw_op",
      "def_filename": "normative_rule_defs/rv64.yaml",
      "tags": [
        {
          "name": "norm:slliw_srliw_sraiw_op",
          "text": "SLLIW, SRLIW, and SRAIW are RV64I-only instructions that are analogously\ndefined but operate on 32-bit values and sign-extend their 32-bit\nresults to 64 bits.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "sraiw_op",
      "def_filename": "normative_rule_defs/rv64.yaml",
      "tags": [
        {
          "name": "norm:slliw_srliw_sraiw_op",
          "text": "SLLIW, SRLIW, and SRAIW are RV64I-only instructions that are analogously\ndefined but operate on 32-bit values and sign-extend their 32-bit\nresults to 64 bits.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "slliw_imm5_rsv",
      "def_filename": "normative_rule_defs/rv64.yaml",
      "summary": "Bit 5 of imm reserved",
      "tags": [
        {
          "name": "norm:slliw_srliw_sraiw_imm5_rsv",
          "text": "SLLIW, SRLIW, and SRAIW encodings with\nimm[5] &amp;#8800; 0 are reserved.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "srliw_imm5_rsv",
      "def_filename": "normative_rule_defs/rv64.yaml",
      "summary": "Bit 5 of imm reserved",
      "tags": [
        {
          "name": "norm:slliw_srliw_sraiw_imm5_rsv",
          "text": "SLLIW, SRLIW, and SRAIW encodings with\nimm[5] &amp;#8800; 0 are reserved.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "sraiw_imm5_rsv",
      "def_filename": "normative_rule_defs/rv64.yaml",
      "summary": "Bit 5 of imm reserved",
      "tags": [
        {
          "name": "norm:slliw_srliw_sraiw_imm5_rsv",
          "text": "SLLIW, SRLIW, and SRAIW encodings with\nimm[5] &amp;#8800; 0 are reserved.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "lui_op_rv64i",
      "def_filename": "normative_rule_defs/rv64.yaml",
      "tags": [
        {
          "name": "norm:lui_op_rv64i",
          "text": "LUI places the\n32-bit U-immediate into register rd, filling in the lowest 12 bits\nwith zeros. The 32-bit result is sign-extended to 64 bits.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "auipc_op_rv64i",
      "def_filename": "normative_rule_defs/rv64.yaml",
      "tags": [
        {
          "name": "norm:auipc_op_rv64i",
          "text": "AUIPC forms a 32-bit offset from the U-immediate, filling in the lowest\n12 bits with zeros, sign-extends the result to 64 bits, adds it to the\naddress of the AUIPC instruction, then places the result in register rd.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "addw_op",
      "def_filename": "normative_rule_defs/rv64.yaml",
      "tags": [
        {
          "name": "norm:addw_subw_op",
          "text": "ADDW and SUBW are RV64I-only instructions that are defined analogously\nto ADD and SUB but operate on 32-bit values and produce signed 32-bit results.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "subw_op",
      "def_filename": "normative_rule_defs/rv64.yaml",
      "tags": [
        {
          "name": "norm:addw_subw_op",
          "text": "ADDW and SUBW are RV64I-only instructions that are defined analogously\nto ADD and SUB but operate on 32-bit values and produce signed 32-bit results.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "addw_overflow",
      "def_filename": "normative_rule_defs/rv64.yaml",
      "tags": [
        {
          "name": "norm:addw_subw_overflow",
          "text": "Overflows are ignored, and the low 32-bits of the result is\nsign-extended to 64-bits and written to the destination register.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "subw_overflow",
      "def_filename": "normative_rule_defs/rv64.yaml",
      "tags": [
        {
          "name": "norm:addw_subw_overflow",
          "text": "Overflows are ignored, and the low 32-bits of the result is\nsign-extended to 64-bits and written to the destination register.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "addiw_overflow",
      "def_filename": "normative_rule_defs/rv64.yaml",
      "tags": [
        {
          "name": "norm:addiw_overflow",
          "text": "Overflows are ignored and the result is the low\n32 bits of the result sign-extended to 64 bits.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "sll_sh_amt_rv64i",
      "def_filename": "normative_rule_defs/rv64.yaml",
      "tags": [
        {
          "name": "norm:sll_srl_sra_sh_amt_rv64i",
          "text": "In RV64I, only the low 6 bits of rs2 are considered\nfor the shift amount.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "srl_sh_amt_rv64i",
      "def_filename": "normative_rule_defs/rv64.yaml",
      "tags": [
        {
          "name": "norm:sll_srl_sra_sh_amt_rv64i",
          "text": "In RV64I, only the low 6 bits of rs2 are considered\nfor the shift amount.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "sra_sh_amt_rv64i",
      "def_filename": "normative_rule_defs/rv64.yaml",
      "tags": [
        {
          "name": "norm:sll_srl_sra_sh_amt_rv64i",
          "text": "In RV64I, only the low 6 bits of rs2 are considered\nfor the shift amount.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "sllw_op",
      "def_filename": "normative_rule_defs/rv64.yaml",
      "tags": [
        {
          "name": "norm:sllw_srlw_sraw_op",
          "text": "SLLW, SRLW, and SRAW are RV64I-only instructions that are analogously\ndefined but operate on 32-bit values and sign-extend their 32-bit\nresults to 64 bits. The shift amount is given by rs2[4:0].",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "srlw_op",
      "def_filename": "normative_rule_defs/rv64.yaml",
      "tags": [
        {
          "name": "norm:sllw_srlw_sraw_op",
          "text": "SLLW, SRLW, and SRAW are RV64I-only instructions that are analogously\ndefined but operate on 32-bit values and sign-extend their 32-bit\nresults to 64 bits. The shift amount is given by rs2[4:0].",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "sraw_op",
      "def_filename": "normative_rule_defs/rv64.yaml",
      "tags": [
        {
          "name": "norm:sllw_srlw_sraw_op",
          "text": "SLLW, SRLW, and SRAW are RV64I-only instructions that are analogously\ndefined but operate on 32-bit values and sign-extend their 32-bit\nresults to 64 bits. The shift amount is given by rs2[4:0].",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "ld_op_rv64i",
      "def_filename": "normative_rule_defs/rv64.yaml",
      "tags": [
        {
          "name": "norm:ld_op_rv64i",
          "text": "The LD instruction loads a 64-bit value from memory into register rd\nfor RV64I.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "lw_op_rv64i",
      "def_filename": "normative_rule_defs/rv64.yaml",
      "tags": [
        {
          "name": "norm:lw_op_rv64i",
          "text": "The LW instruction loads a 32-bit value from memory and sign-extends\nthis to 64 bits before storing it in register rd for RV64I.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "lwu_op",
      "def_filename": "normative_rule_defs/rv64.yaml",
      "tags": [
        {
          "name": "norm:lwu_op",
          "text": "The LWU instruction, on the other hand, zero-extends the 32-bit value from\nmemory for RV64I.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "lh_op_rv64i",
      "def_filename": "normative_rule_defs/rv64.yaml",
      "summary": "lh RV64I operation",
      "tags": [
        {
          "name": "norm:ld_op_rv64i",
          "text": "The LD instruction loads a 64-bit value from memory into register rd\nfor RV64I.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        },
        {
          "name": "norm:lw_op_rv64i",
          "text": "The LW instruction loads a 32-bit value from memory and sign-extends\nthis to 64 bits before storing it in register rd for RV64I.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        },
        {
          "name": "norm:lh_lhu_lb_lbu_op_rv64i",
          "text": "LH and LHU are defined analogously for 16-bit values,\nas are LB and LBU for 8-bit values.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "lhu_rv64i_op",
      "def_filename": "normative_rule_defs/rv64.yaml",
      "summary": "lhu RV64I operation",
      "tags": [
        {
          "name": "norm:ld_op_rv64i",
          "text": "The LD instruction loads a 64-bit value from memory into register rd\nfor RV64I.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        },
        {
          "name": "norm:lw_op_rv64i",
          "text": "The LW instruction loads a 32-bit value from memory and sign-extends\nthis to 64 bits before storing it in register rd for RV64I.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        },
        {
          "name": "norm:lh_lhu_lb_lbu_op_rv64i",
          "text": "LH and LHU are defined analogously for 16-bit values,\nas are LB and LBU for 8-bit values.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "lb_rv64i_op",
      "def_filename": "normative_rule_defs/rv64.yaml",
      "summary": "lb RV64I operation",
      "tags": [
        {
          "name": "norm:ld_op_rv64i",
          "text": "The LD instruction loads a 64-bit value from memory into register rd\nfor RV64I.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        },
        {
          "name": "norm:lw_op_rv64i",
          "text": "The LW instruction loads a 32-bit value from memory and sign-extends\nthis to 64 bits before storing it in register rd for RV64I.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        },
        {
          "name": "norm:lh_lhu_lb_lbu_op_rv64i",
          "text": "LH and LHU are defined analogously for 16-bit values,\nas are LB and LBU for 8-bit values.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "lbu_rv64i_op",
      "def_filename": "normative_rule_defs/rv64.yaml",
      "summary": "lbu RV64I operation",
      "tags": [
        {
          "name": "norm:ld_op_rv64i",
          "text": "The LD instruction loads a 64-bit value from memory into register rd\nfor RV64I.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        },
        {
          "name": "norm:lw_op_rv64i",
          "text": "The LW instruction loads a 32-bit value from memory and sign-extends\nthis to 64 bits before storing it in register rd for RV64I.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        },
        {
          "name": "norm:lh_lhu_lb_lbu_op_rv64i",
          "text": "LH and LHU are defined analogously for 16-bit values,\nas are LB and LBU for 8-bit values.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "sd_op_rv64i",
      "def_filename": "normative_rule_defs/rv64.yaml",
      "tags": [
        {
          "name": "norm:sd_sw_sh_sb_op_rv64i",
          "text": "The SD, SW, SH, and SB instructions\nstore 64-bit, 32-bit, 16-bit, and 8-bit values from the low bits of\nregister rs2 to memory respectively.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "sw_op_rv64i",
      "def_filename": "normative_rule_defs/rv64.yaml",
      "tags": [
        {
          "name": "norm:sd_sw_sh_sb_op_rv64i",
          "text": "The SD, SW, SH, and SB instructions\nstore 64-bit, 32-bit, 16-bit, and 8-bit values from the low bits of\nregister rs2 to memory respectively.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "sh_op_rv64i",
      "def_filename": "normative_rule_defs/rv64.yaml",
      "tags": [
        {
          "name": "norm:sd_sw_sh_sb_op_rv64i",
          "text": "The SD, SW, SH, and SB instructions\nstore 64-bit, 32-bit, 16-bit, and 8-bit values from the low bits of\nregister rs2 to memory respectively.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "sb_op_rv64i",
      "def_filename": "normative_rule_defs/rv64.yaml",
      "tags": [
        {
          "name": "norm:sd_sw_sh_sb_op_rv64i",
          "text": "The SD, SW, SH, and SB instructions\nstore 64-bit, 32-bit, 16-bit, and 8-bit values from the low bits of\nregister rs2 to memory respectively.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "Zilsd_reg_pairs",
      "def_filename": "normative_rule_defs/zilsd.yaml",
      "tags": [
        {
          "name": "norm:Zilsd_reg_pairs",
          "text": "Operands containing src for store instructions and dest for load instructions are held in aligned x-register pairs, i.e., register numbers must be even.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "Zilsd_bits_to_pair",
      "def_filename": "normative_rule_defs/zilsd.yaml",
      "tags": [
        {
          "name": "norm:Zilsd_bits_to_pair",
          "text": "Regardless of endianness, the lower-numbered register holds the\nlow-order bits, and the higher-numbered register holds the high-order\nbits: e.g., bits 31:0 of an operand in Zilsd might be held in register x14, with bits 63:32 of that operand held in x15.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "Zilsd_align8_no_exc",
      "def_filename": "normative_rule_defs/zilsd.yaml",
      "tags": [
        {
          "name": "norm:Zilsd_align8_no_exc",
          "text": "As the access size is 64-bit, accesses are only considered naturally aligned for effective addresses that are a multiple of 8.\nIn this case, these instructions are guaranteed to not raise an address-misaligned exception.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "Zilsd_align8_atomic_unknown",
      "def_filename": "normative_rule_defs/zilsd.yaml",
      "tags": [
        {
          "name": "norm:Zilsd_align8_atomic_unknown",
          "text": "Even if naturally aligned, the memory access might not be performed atomically.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "Zilsd_align4_atomic",
      "def_filename": "normative_rule_defs/zilsd.yaml",
      "tags": [
        {
          "name": "norm:Zilsd_align4_atomic",
          "text": "If the effective address is a multiple of 4, then each word access is required to be performed atomically.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "Zilsd_ld_resume_trap",
      "def_filename": "normative_rule_defs/zilsd.yaml",
      "tags": [
        {
          "name": "norm:Zilsd_ld_resume_trap",
          "text": "To ensure resumable trap handling is possible for the load instructions, the base register must\nhave its original value if a trap is taken. The other register in the pair can have been updated.\nThis affects x2 for the stack pointer relative instruction and rs1 otherwise.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "Zilsd_ld_x0",
      "def_filename": "normative_rule_defs/zilsd.yaml",
      "tags": [
        {
          "name": "norm:Zilsd_ld_x0",
          "text": "LD instructions with destination x0 are processed as any other load, but the result is discarded entirely and x1 is not written.\nFor C.LDSP, usage of x0 as the destination is reserved.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "Zilsd_sd_x0",
      "def_filename": "normative_rule_defs/zilsd.yaml",
      "tags": [
        {
          "name": "norm:Zilsd_sd_x0",
          "text": "If using x0 as src of SD or C.SDSP, the entire 64-bit operand is zero — i.e., register x1 is not accessed.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "Zilsd_RVWMO_exc_misaligned",
      "def_filename": "normative_rule_defs/zilsd.yaml",
      "tags": [
        {
          "name": "norm:Zilsd_RVWMO_exc_misaligned",
          "text": "For the purposes of RVWMO and exception handling, LD and SD instructions are\nconsidered to be misaligned loads and stores",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "Zilsd_align4_two_4byte",
      "def_filename": "normative_rule_defs/zilsd.yaml",
      "tags": [
        {
          "name": "norm:Zilsd_align4_two_4byte",
          "text": "an LD or SD instruction whose effective address is a multiple of 4 gives rise\nto two 4-byte memory operations.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "Zilsd_ld_op",
      "def_filename": "normative_rule_defs/zilsd.yaml",
      "tags": [
        {
          "name": "norm:Zilsd_ld_op",
          "text": "Loads a 64-bit value into registers rd and rd+1.\nThe effective address is obtained by adding register rs1 to the\nsign-extended 12-bit offset.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "Zilsd_sd_op",
      "def_filename": "normative_rule_defs/zilsd.yaml",
      "tags": [
        {
          "name": "norm:Zilsd_sd_op",
          "text": "Stores a 64-bit value from registers rs2 and rs2+1.\nThe effective address is obtained by adding register rs1 to the\nsign-extended 12-bit offset.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "c-ldsp_op",
      "def_filename": "normative_rule_defs/zilsd.yaml",
      "tags": [
        {
          "name": "norm:c-ldsp_op",
          "text": "Loads stack-pointer relative 64-bit value into registers rd' and rd'+1. It computes its effective address by adding the zero-extended offset, scaled by 8, to the stack pointer, x2. It expands to ld rd, offset(x2). C.LDSP is only valid when rd&#x2260;x0; the code points with rd=x0 are reserved.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "c-sdsp_op",
      "def_filename": "normative_rule_defs/zilsd.yaml",
      "tags": [
        {
          "name": "norm:c-sdsp_op",
          "text": "Stores a stack-pointer relative 64-bit value from registers rs2' and rs2'+1. It computes an effective address by adding the zero-extended offset, scaled by 8, to the stack pointer, x2. It expands to sd rs2, offset(x2).",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "c-ld_op",
      "def_filename": "normative_rule_defs/zilsd.yaml",
      "tags": [
        {
          "name": "norm:c-ld_op",
          "text": "Loads a 64-bit value into registers rd' and rd'+1.\nIt computes an effective address by adding the zero-extended offset, scaled by 8, to the base address in register rs1'.",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    },
    {
      "name": "c-sd_op",
      "def_filename": "normative_rule_defs/zilsd.yaml",
      "tags": [
        {
          "name": "norm:c-sd_op",
          "text": "Stores a 64-bit value from registers rs2' and rs2'+1.\nIt computes an effective address by adding the zero-extended offset, scaled by 8, to the base address in register rs1'.\nIt expands to sd rs2', offset(rs1').",
          "tag_filename": "/build/riscv-unprivileged-norm-tags.json"
        }
      ]
    }
  ]
}